theta_samp <- rmix(posterior.indiv, 1)
## Store the results
post_w_samp[s] <- w_samp
post_theta_samp[s] <- theta_samp
}
library(coda)
plot(as.mcmc(post_w_samp))
plot(as.mcmc(post_theta_samp))
n.mcmc <- 1e3
w_samp <- theta_samp <- 0.5
post_w_samp <- post_theta_samp <- rep(0, n.mcmc)
for(s in 1:n.mcmc){
##--------------------------
## Block 1: draw w
##--------------------------
## Proposal distribution
w_s <- expit(rnorm(1, logit(w_samp), sd = 0.001))
## Ratio
r_w <- post_w(w = w_s, theta = theta_samp,
y.h = y_h, n.h = n_h[i])
## Accept
if(r_w > runif(1)) w_samp <- w_s
##--------------------------
## Block 2: draw theta
##--------------------------
prior.unif <- mixbeta(c(w_samp, a + y_h, b + n_h[i] - y_h),
c(1 - w_samp, a,       b))
posterior.indiv <- postmix(prior.unif,
n = c(n_c[i], n_c[i]),
r = c(y_c, y_c))
theta_samp <- rmix(posterior.indiv, 1)
## Store the results
post_w_samp[s] <- w_samp
post_theta_samp[s] <- theta_samp
}
library(coda)
plot(as.mcmc(post_w_samp))
plot(as.mcmc(post_theta_samp))
n.mcmc <- 1e3
w_samp <- theta_samp <- 0.5
post_w_samp <- post_theta_samp <- rep(0, n.mcmc)
for(s in 1:n.mcmc){
##--------------------------
## Block 1: draw w
##--------------------------
## Proposal distribution
w_s <- expit(rnorm(1, logit(w_samp), sd = 0.01))
## Ratio
r_w <- post_w(w = w_s, theta = theta_samp,
y.h = y_h, n.h = n_h[i])
## Accept
if(r_w > runif(1)) w_samp <- w_s
##--------------------------
## Block 2: draw theta
##--------------------------
prior.unif <- mixbeta(c(w_samp, a + y_h, b + n_h[i] - y_h),
c(1 - w_samp, a,       b))
posterior.indiv <- postmix(prior.unif,
n = c(n_c[i], n_c[i]),
r = c(y_c, y_c))
theta_samp <- rmix(posterior.indiv, 1)
## Store the results
post_w_samp[s] <- w_samp
post_theta_samp[s] <- theta_samp
}
library(coda)
plot(as.mcmc(post_w_samp))
plot(as.mcmc(post_theta_samp))
n.mcmc <- 1e3
w_samp <- theta_samp <- 0.5
post_w_samp <- post_theta_samp <- rep(0, n.mcmc)
for(s in 1:n.mcmc){
##--------------------------
## Block 1: draw w
##--------------------------
## Proposal distribution
w_s <- expit(rnorm(1, logit(w_samp), sd = 0.1))
## Ratio
r_w <- post_w(w = w_s, theta = theta_samp,
y.h = y_h, n.h = n_h[i])
## Accept
if(r_w > runif(1)) w_samp <- w_s
##--------------------------
## Block 2: draw theta
##--------------------------
prior.unif <- mixbeta(c(w_samp, a + y_h, b + n_h[i] - y_h),
c(1 - w_samp, a,       b))
posterior.indiv <- postmix(prior.unif,
n = c(n_c[i], n_c[i]),
r = c(y_c, y_c))
theta_samp <- rmix(posterior.indiv, 1)
## Store the results
post_w_samp[s] <- w_samp
post_theta_samp[s] <- theta_samp
}
library(coda)
plot(as.mcmc(post_w_samp))
plot(as.mcmc(post_theta_samp))
# In this example https://www.fda.gov/media/161758/download, the data is as follows:
library(SAMprior)
#######phase 2 data mITT;
n0_trt=39;
r0_trt=25;
n0_con=43;
r0_con=19;
##############phase 3 data mITT
n_trt=177;
r_trt=126;
n_con=85;
r_con=53;
# I obtained SAM weights for treatment and for control response rates as follows.  Did I do it correctly?
priorp2.con<-mixbeta(c(1,r0_con,n0_con-r0_con))
wSAM.con<-SAM_weight(if.prior=priorp2.con,
delta=0.15,      ##Clinically significant difference
n=n_con, r=r_con ##Control arm data in the phase 3 trial
)
priorp2.trt<-mixbeta(c(1,r0_trt,n0_trt-r0_trt))
wSAM.trt<-SAM_weight(if.prior=priorp2.trt,
delta=0.15,      ##Clinically significant difference
n=n_trt, r=r_trt ##treatment arm data in the phase 3 trial
)
# The problem here is that the response rates are very different in the two trials.
# Thus, it would of interest to obtain SAM weight in log odds ratio scale.
r0_t=r0_trt/n0_trt;
r0_c=r0_con/n0_con;
logor0<-log(r0_t*(1-r0_c)/r0_c/(1-r0_t))
se0<-sqrt(1/r0_trt+1/r0_con+1/(n0_trt-r0_trt)+1/(n0_con-r0_con))
priorp2.con<-mixnorm(c(1, logor0, se0))
## For the phase III study
r_t <- r_trt / n_trt
r_c <- r_con / n_con
## Calculate the odds ratio and standard deviation
logor <- log(r_t * (1 - r_c) / r_c / (1 - r_t))
se    <- sqrt(1/r_trt+1/r_con+1/(n_trt-r_trt)+1/(n_con-r_con))
delta = 0.75
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
## SAM weight
wSAM <- R / (1 + R)
# How do we specify data=? to obtain SAM weight below?
# wSAM<-SAM_weight(if.prior=priorp2.con,
#                  delta=0.75,      ##Clinically significant difference
#                  data=?
# )
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM
wSAM
?SAM_weight
SAM_weight
se
wSAM
# In this example https://www.fda.gov/media/161758/download, the data is as follows:
library(SAMprior)
#######phase 2 data mITT;
n0_trt=39;
r0_trt=25;
n0_con=43;
r0_con=19;
##############phase 3 data mITT
n_trt=177;
r_trt=126;
n_con=85;
r_con=53;
priorp2.con<-mixbeta(c(1,r0_con,n0_con-r0_con))
wSAM.con<-SAM_weight(if.prior=priorp2.con,
delta=0.15,      ##Clinically significant difference
n=n_con, r=r_con ##Control arm data in the phase 3 trial
)
priorp2.trt<-mixbeta(c(1,r0_trt,n0_trt-r0_trt))
wSAM.trt<-SAM_weight(if.prior=priorp2.trt,
delta=0.15,      ##Clinically significant difference
n=n_trt, r=r_trt ##treatment arm data in the phase 3 trial
)
# The problem here is that the response rates are very different in the two trials.
# Thus, it would of interest to obtain SAM weight in log odds ratio scale.
r0_t=r0_trt/n0_trt;
r0_c=r0_con/n0_con;
logor0<-log(r0_t*(1-r0_c)/r0_c/(1-r0_t))
se0<-sqrt(1/r0_trt+1/r0_con+1/(n0_trt-r0_trt)+1/(n0_con-r0_con))
priorp2.con<-mixnorm(c(1, logor0, se0))
priorp2.con
## For the phase III study
r_t <- r_trt / n_trt
r_c <- r_con / n_con
## Calculate the odds ratio and standard deviation
logor <- log(r_t * (1 - r_c) / r_c / (1 - r_t))
se    <- sqrt(1/r_trt+1/r_con+1/(n_trt-r_trt)+1/(n_con-r_con))
delta = 0.75
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
## SAM weight
wSAM <- R / (1 + R)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM
if.prior = priorp2.con
data = logor
sigma = se
!missing(data)
data
m <- mean(data)
n <- length(data)
sigma
# In this example https://www.fda.gov/media/161758/download, the data is as follows:
library(SAMprior)
#######phase 2 data mITT;
n0_trt=39;
r0_trt=25;
n0_con=43;
r0_con=19;
##############phase 3 data mITT
n_trt=177;
r_trt=126;
n_con=85;
r_con=53;
# I obtained SAM weights for treatment and for control response rates as follows.  Did I do it correctly?
priorp2.con<-mixbeta(c(1,r0_con,n0_con-r0_con))
wSAM.con<-SAM_weight(if.prior=priorp2.con,
delta=0.15,      ##Clinically significant difference
n=n_con, r=r_con ##Control arm data in the phase 3 trial
)
priorp2.trt<-mixbeta(c(1,r0_trt,n0_trt-r0_trt))
wSAM.trt<-SAM_weight(if.prior=priorp2.trt,
delta=0.15,      ##Clinically significant difference
n=n_trt, r=r_trt ##treatment arm data in the phase 3 trial
)
# The problem here is that the response rates are very different in the two trials.
# Thus, it would of interest to obtain SAM weight in log odds ratio scale.
r0_t=r0_trt/n0_trt;
r0_c=r0_con/n0_con;
logor0<-log(r0_t*(1-r0_c)/r0_c/(1-r0_t))
se0<-sqrt(1/r0_trt+1/r0_con+1/(n0_trt-r0_trt)+1/(n0_con-r0_con))
priorp2.con<-mixnorm(c(1, logor0, se0))
## For the phase III study
r_t <- r_trt / n_trt
r_c <- r_con / n_con
## Calculate the odds ratio and standard deviation
logor <- log(r_t * (1 - r_c) / r_c / (1 - r_t))
se    <- sqrt(1/r_trt+1/r_con+1/(n_trt-r_trt)+1/(n_con-r_con))
delta = 0.75
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
## SAM weight
wSAM <- R / (1 + R)
# How do we specify data=? to obtain SAM weight below?
# wSAM<-SAM_weight(if.prior=priorp2.con,
#                  delta=0.75,      ##Clinically significant difference
#                  data=?
# )
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
## SAM weight
wSAM <- R / (1 + R)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
if.prior = priorp2.con
m = logor
n = 1
sigma=se
if(!missing(data)) {
m <- mean(data)
n <- length(data)
if(n == 1 & missing(sigma)){
stop("Standard deviation in the control arm must be given.")
}else if(n > 1 & missing(sigma)){
sigma <- sd(data)
}
## Try to see if the summary data is provided
if_summary <- FALSE
} else {
# if(missing(data)){
#   stop("Individual data must be given.")
# }
if_summary = TRUE
}
m
n
sigma
theta.h <- summary(if.prior)['mean']
## The posterior mean estimation from the MAP prior
theta_h_hat <- theta.h
## Based on summary data
R1 <- -1/2 * ( (n*delta * (delta - 2 * m + 2 * theta_h_hat) ) / sigma^2 )
R2 <- -1/2 * ( (n*delta * (delta + 2 * m - 2 * theta_h_hat) ) / sigma^2 )
R  <- 1/exp(-max(R1, R2))
## SAM weight
w = 1 / (1 + R)
w
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
w
## SAM weight
wSAM <- R / (1 + R)
wSAM
library(SAMprior)
#######phase 2 data mITT;
n0_trt=39;
r0_trt=25;
n0_con=43;
r0_con=19;
##############phase 3 data mITT
n_trt=177;
r_trt=126;
n_con=85;
r_con=53;
# I obtained SAM weights for treatment and for control response rates as follows.  Did I do it correctly?
priorp2.con<-mixbeta(c(1,r0_con,n0_con-r0_con))
wSAM.con<-SAM_weight(if.prior=priorp2.con,
delta=0.15,      ##Clinically significant difference
n=n_con, r=r_con ##Control arm data in the phase 3 trial
)
priorp2.trt<-mixbeta(c(1,r0_trt,n0_trt-r0_trt))
wSAM.trt<-SAM_weight(if.prior=priorp2.trt,
delta=0.15,      ##Clinically significant difference
n=n_trt, r=r_trt ##treatment arm data in the phase 3 trial
)
# The problem here is that the response rates are very different in the two trials.
# Thus, it would of interest to obtain SAM weight in log odds ratio scale.
r0_t=r0_trt/n0_trt;
r0_c=r0_con/n0_con;
logor0<-log(r0_t*(1-r0_c)/r0_c/(1-r0_t))
se0<-sqrt(1/r0_trt+1/r0_con+1/(n0_trt-r0_trt)+1/(n0_con-r0_con))
priorp2.con<-mixnorm(c(1, logor0, se0))
## For the phase III study
r_t <- r_trt / n_trt
r_c <- r_con / n_con
## Calculate the odds ratio and standard deviation
logor <- log(r_t * (1 - r_c) / r_c / (1 - r_t))
se    <- sqrt(1/r_trt+1/r_con+1/(n_trt-r_trt)+1/(n_con-r_con))
delta = 0.75
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
## SAM weight
wSAM <- R / (1 + R)
## SAM weight
wSAM_1 <- R / (1 + R)
wSAM_2 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor)
# In this example https://www.fda.gov/media/161758/download, the data is as follows:
library(SAMprior)
#######phase 2 data mITT;
n0_trt=39;
r0_trt=25;
n0_con=43;
r0_con=19;
##############phase 3 data mITT
n_trt=177;
r_trt=126;
n_con=85;
r_con=53;
priorp2.con<-mixbeta(c(1,r0_con,n0_con-r0_con))
wSAM.con<-SAM_weight(if.prior=priorp2.con,
delta=0.15,      ##Clinically significant difference
n=n_con, r=r_con ##Control arm data in the phase 3 trial
)
priorp2.trt<-mixbeta(c(1,r0_trt,n0_trt-r0_trt))
wSAM.trt<-SAM_weight(if.prior=priorp2.trt,
delta=0.15,      ##Clinically significant difference
n=n_trt, r=r_trt ##treatment arm data in the phase 3 trial
)
# The problem here is that the response rates are very different in the two trials.
# Thus, it would of interest to obtain SAM weight in log odds ratio scale.
r0_t=r0_trt/n0_trt;
r0_c=r0_con/n0_con;
logor0<-log(r0_t*(1-r0_c)/r0_c/(1-r0_t))
se0<-sqrt(1/r0_trt+1/r0_con+1/(n0_trt-r0_trt)+1/(n0_con-r0_con))
priorp2.con<-mixnorm(c(1, logor0, se0))
## For the phase III study
r_t <- r_trt / n_trt
r_c <- r_con / n_con
## Calculate the odds ratio and standard deviation
logor <- log(r_t * (1 - r_c) / r_c / (1 - r_t))
se    <- sqrt(1/r_trt+1/r_con+1/(n_trt-r_trt)+1/(n_con-r_con))
delta = 0.75
## We have to
R <- exp(-1/2 * ( (logor - logor0) / se )^2  -
max(-1/2 * ( (logor - logor0 - delta) / se )^2 ,  -1/2 * ( (logor - logor0 + delta) / se )^2 ))
## SAM weight
wSAM_1 <- R / (1 + R)
wSAM_2 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor， sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
wSAM_2 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor)
wSAM_2 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
m = logor, n = 1, sigma = se)
wSAM_3 <- SAM_weight(if.prior = priorp2.con,
delta = delta,
data = logor, sigma = se)
theta_h <- 0.2
sigma <- 2
n = 100
y_i <- rnorm(n, 0.1, sd = sigma)
delta = 0.5
y_bar = mean(y_i)
SAM_weight(if.prior = priorp2.con,
delta = delta, m = y_bar, n = n, sigma = sigma)
SAM_weight(if.prior = priorp2.con,
delta = delta, data = y_i)
data
data = y_i
if.prior = priorp2.con
m <- mean(data)
n <- length(data)
m
y_bar
n
sigma
SAM_weight(if.prior = priorp2.con,
delta = delta, m = y_bar, n = n, sigma = sd(y_i))
SAM_weight(if.prior = priorp2.con,
delta = delta, data = y_i)
setwd("~/Box Sync/EPD/Shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Box Sync/EPD/Shiny")
runApp()
runApp('myapp')
setwd("~/Box Sync/EPD/Shiny")
shinylive::export(app_dir = "myapp", output_dir = "docs")
pak::pak("posit-dev/r-shinylive")
install.packages("pak")
pak::pak("posit-dev/r-shinylive")
pak::pak("rstudio/httpuv")
install.packages("shinylive")
install.packages("shinylive")
install.packages("shinylive")
shinylive::export(app_dir = "myapp", output_dir = "docs")
shinylive::export(appdir = "myapp", output_dir = "docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
httpuv
install.packages('httpuv')
install.packages("httpuv")
setwd("~/Box Sync/GitHub/CP-MRI")
httpuv::runStaticServer("docs/", port=8008)
library(httpuv)
runStaticServer
?runStaticServer
??runStaticServer
setwd("~/Box Sync/GitHub/CP-MRI")
shinylive::export(appdir = "myapp", output_dir = "docs")
shinylive::export(appdir = "myapp", destdir = "docs")
?shinylive::export
library(plumber)
install.packages('blumber')
install.packages('plumber')
library(plumber)
pr() %>%
pr_static("/", "docs/") %>%
pr_run()
library(plumber)
pr() %>%
pr_static("/", "docs/") %>%
pr_run()
shinylive::export(appdir = "myapp", destdir = "docs")
pr() %>% pr_static("/", "docs") %>% pr_run()
